* Brave Clojure 2022 : Meetup 1
  Jan 21, 2022, 17:00 GMT 
  Introduction & CBT Part I: Environment Setup (chapters 1 and 2) 

** Introduction Checklist
   1. Code review: what tool will we use? > Github
   2. Code review: what system do we use for pairing reviewers with coders? > Table (linked)
   3. Are we doing simultaneous coding with screen sharing, or are we going to divide the chapters and tasks among ourselves? > Divide parts, see table
   4. What is our timeframe for code review and meeting preparation? (As below)
   5. What structure for the meetings do we prefer? (60 mins, possibly more, start with chapter and solutions)
   6. Should we record the meetings? (Yes, but DM if you are not OK with it.) 

** Chapter 1 Checklist
   1. Create a new Clojure project using Terminal 
   2. Run the Clojure project
   3. Build the Clojure project
   4. Use the REPL

** Chapter 2 Checklist
   1. Pick an editor or IDE
   2. Run the REPL in your editor or IDE

** Next meeting: Feb 4, 2022, 17:00 GMT
   - CBT Chapter 3: reading + note all new concepts
   - CBT Chapter 3 submittables: Hobbit Model + 6 exercises (deadline for code
     submission: Jan 28, 2022, 17:00 GMT -- reviewer-coder pairing: Jan 28-29,
     2022 -- deadline for submitting code review: Feb 1, 2022, 17:00 GMT)
   - CBT Appendix A: read + prep 1 plug-in from the Leiningen documentation to
     talk about during the meeting (whatever looks useful to you)
   - Talk about new tools (such as alternatives to Leningen, etc.)

** Resources:
   Our book (CBT): https://www.braveclojure.com/clojure-for-the-brave-and-true/ 
   Code repo: https://github.com/asamonek/braveclojure2022 
   Reviewer-coder draw + chapter content: https://docs.google.com/spreadsheets/d/1t7k7fp7KJolyx4DvOeviKxEGhKOA89_WnwqxT8FnFPA/edit?usp=sharing 

* Brave Clojure 2022: Meetup 2
  Feb 04, 2022, 17:00 GMT 
  Capter 3

** Syntax

** Data Structures

** Functions

** let, loop, regular expressions
*** let
    - bindings inside its own lexical scope
    - binds symbols to expressions
    - lexical scope is limited to the =let= form
    - last form inside is evaluated (and returned)
    #+begin_src clojure
      (let [x 1]
        x)
    #+end_src

    #+RESULTS:
    : 1

    #+begin_src clojure
      (let [a 1
            b (inc 1)]
        (+ a b))
    #+end_src

    #+RESULTS:
    : 3
    
    #+begin_src clojure
      (def a 5)
      (let [a 1
            b (inc 1)]
        (+ a b))
    #+end_src

    #+RESULTS:
    | #'chap03/a |
    |          3 |

*** loop
    - almost the same as =let=
      - bindings inside its own lexical scope
      - binds symbols to expressions
      - lexical scope is limited to the =loop= form
    - acts as =recur= target
    - needs an exit to return
    - recursive
    - hack so that tail-call-optimization works in Clojure
      (which does not on the JVM)

    #+begin_src clojure
      (loop [x 10
             squares []]
        (if (zero? x) squares
            (recur (dec x)
                   (conj squares (* x x)))))
    #+end_src

    #+RESULTS:
    | 100 | 81 | 64 | 49 | 36 | 25 | 16 | 9 | 4 | 1 |

*** RegEx
    - Clojure RegExes are Java RegExes
    - notation: =#"RegEx"=
    - some useful functions using RegExes:

    #+begin_src clojure
      (def str-01 "xfoox")
      (re-find #"foo" str-01)
      (re-matches #"foo" str-01) ; -> nil
      (re-find #"^foo" str-01) ; -> nil
      (re-find #"^xfoo" str-01)
      (re-find #"^foox" str-01) ; -> nil
    #+end_src

    #+RESULTS:
    | #'user/str-01 |
    | "foo"         |
    | "xfoo"        |

    #+begin_src clojure
      (def str-02 "up 3,down 40,left 3,up 1, up 2")
      (re-seq #"\d+" str-02)
      (clojure.string/split str-02 #",")
    #+end_src

    #+RESULTS:
    | #'user/str-02                              |
    | ("3" "40" "3" "1" "2")                     |
    | ["up 3" "down 40" "left 3" "up 1" " up 2"] |

    #+begin_src clojure
      (def str-03 "3,40,3,1,2")
      (clojure.string/split str-03 #",")
    #+end_src

    #+RESULTS:
    | #'user/str-03          |
    | ["3" "40" "3" "1" "2"] |

    #+begin_src clojure
      (def str-04 "2 - steps north")
      (re-find #"(\d+) - (\w+ \w+)" str-04)
    #+end_src

    #+RESULTS:
    | #'user/str-04                         |
    | ["2 - steps north" "2" "steps north"] |

** symmetrizer, reduce

** Hobbit violence

** Exercise 1

** Exercise 2

** Exercise 3

** Exercise 4

** Exercise 5

** Exercise 6

** Appendix A (Leiningen vs newer Tools)
*** Leiningen
    - manages dependencies
    - scaffolds projects
    - can use different project templates
    - create jars
    - deploy artifacts to maven central
    - the [[https://www.clojure-toolbox.com/][Clojure-Toolbox]] is very old but categorizes libraries -> good starting point
    - better use [[https://clojars.org/][Clojars]] but the search is not very good
    - has plugins
      - linter
      - test runner
    - uses 2 JVMs
*** tools.deps
    - mainly for dependency management and building classpath
    - more low level
    - less clutter
    - pick and choose what is needed (perhaps a different test runner than the standard in Leiningen)
    - can use git shas as deps
    - with enough work can do everything Leiningen does
    - uses 1 JVM

* Brave Clojure 2022: Meetup 3
  Feb 18, 2022, 17:00 GMT 
  Capter 4

** [#A] Programming to Abstractions (Treating Lists, Vectors, Sets, and Maps as Sequences)
   - we talked about that last week
   - the great strength of Clojure is that you have a ton of functions working
     on all basic data structures
     #+begin_quote
     "It is better to have 100 functions operate on one data structure than 10
     functions on 10 data structures." —Alan Perlis
     #+end_quote
   - to be a =seq= you have to implement
     - =first=
     - =rest=
     - =cons=
   #+begin_src clojure
     (seq [1 2 3])
     (seq '(1 2 3))
     (seq "foo")
     (seq #{1 2 3})
   #+end_src

   #+RESULTS:
   | (1 2 3)    |
   | (1 2 3)    |
   | (\f \o \o) |
   | (1 3 2)    |

   #+begin_src clojure
     (first [1 2 3])
     (rest [1 2 3])
     (cons 1 [2 3])
     (cons 1 '(2 3))
   #+end_src

   #+RESULTS:
   | 1       |
   | (2 3)   |
   | (1 2 3) |
   | (1 2 3) |

   - calls =seq= on data structure and then the fn
     #+begin_src clojure
       (map [1 2 3]) ;; turns to
       (map (seq [1 2 3]))
     #+end_src

   #+begin_src clojure
     (map (juxt identity seq? type)
       [(range 1 4)
        (take 3 (iterate inc 1))
        (list 1 2 3)
        (conj (list 2 3) 1)
        (cons 1 (list 2 3))
        [1 2 3]
        (seq [1 2 3])])
   #+end_src

   #+RESULTS:
   | (1 2 3) | true  | clojure.lang.LongRange                   |
   | (1 2 3) | true  | clojure.lang.LazySeq                     |
   | (1 2 3) | true  | clojure.lang.PersistentList              |
   | (1 2 3) | true  | clojure.lang.PersistentList              |
   | (1 2 3) | true  | clojure.lang.Cons                        |
   | [1 2 3] | false | clojure.lang.PersistentVector            |
   | (1 2 3) | true  | clojure.lang.PersistentVector$ChunkedSeq |

   - a seq can be lazy. getting length can be costly

   #+begin_src clojure
     (let [s (range 1e6)]
       (time (count s)))
     (let [s (apply list(range 1e6))]
       (time (count s)))
   #+end_src

   #+RESULTS:
   | 1000000 |
   | 1000000 |

   - functions in the core library are separated into
     - either collection fns
       (which take a coll as the first arg and return a coll of the same type)
       =conj=, =assoc=, =count=, =get=
     - or sequence fns (which take a "seqable" thing as the last argument,
       convert it to a sequence, perform their function, and return a sequence)
       =map=, =filter=, =reduce=
       
       
   
** [#A] Programming to Abstractions (first, rest, and cons)
*** cons
    - [[https://en.wikipedia.org/wiki/Cons][cons | wiki]]
    - constructing memory objects which hold two values (or pointers to values)
    - =car= being the first element
    - =cdr= being the second element
    - cons cell ordered pair: =(cons 1 2) -> (1 . 2)=
    - cons cell list: =(cons 1 (cons 2 (cons 3)))=

** Programming to Abstractions (Abstraction Though Indirection)

** Seq Function Examples (map, reduce)

** Seq Function Examples (take, drop, take-while, and drop-while)

** Seq Function Examples (filter and some, sort and sort-by, concat)

** Lazy Seqs (Demonstrating Lazy Seq Efficiency, Infinite Sequences)

** The Collection Abstraction (into, conj)

** Function Functions (apply, partial, complement)

** A Vampire Data Analysis Program for the FWPD

** Exercise 1

** [#A] Exercise 2

** Exercise 3

** Exercise 4
